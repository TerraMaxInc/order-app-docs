---
title: "TerraMax Application Insights"
format: html
---

*Application Insights* is a resource that lets you view activity and error logs for specific apps; a separate instance needs to be set up for each app you want to monitor.  In this project, the only app that has an *Application Insights* resource set up is the [HubSpot Service](../hubspot-service/hubspot-service.html).  Whereas for client-side apps you can view logging directly within the browser with *Dev Tools*, the backend service needs a place to store logging or else it becomes a black box in dev.

You can access the *Application Insights* from the [Azure Portal](azure-portal.html).  `terramax-hubspot-service-app-insights` should be in the list of Resources in the Home page:
![`terramax-hubspot-service-app-insights` in the Home page list of Resources](../../../images/app_insights.png)

Click on the *App Insights* item and then go to `Activity log`, and then click "Visit Log Analytics":
![Click on "Visit log analytics"](../../../images/app_insights_visit_log_analytics.png)

From there you can query the logs using either "KQL mode" or "Simple mode".  I prefer KQL, and often use queries like
    `traces | where timestamp > ago(24h) | order by timestamp desc`

or
    `traces | where timestamp > ago(96h) | where message contains 'cordell' order by timestamp`

- The `timestamp > ago(24h)` part filters to only logs from 24 hours ago *or less*; I found this counter-intuitive at first, but I assume its a matter of being *greater than the actual timestamp value in @unix-time* or something, rather than being *greater than 24 hours ago*.

These logs are generated by intentional `context.log` statements in the app code, and are only as useful as you make them.  If you get really desperate, you might try adding more logging statements into the code.

If you don't see any logs for the expected time range, it may mean that the error you're trying to chase was local to the device and prevented it from getting far enough for Azure to log anything.  If there was no Wifi, for instance, then Azure would have no way of ever knowing that the user tried to do something.